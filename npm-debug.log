0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.11.3
3 info using node@v0.12.7
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/cmstead/Documents/projects/JFP',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/cmstead/.npm/jfp/2.6.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/cmstead/.npm/jfp/2.6.0/package.tgz',
9 verbose tar pack   '/Users/cmstead/Documents/projects/JFP' ]
10 verbose tarball /Users/cmstead/.npm/jfp/2.6.0/package.tgz
11 verbose folder /Users/cmstead/Documents/projects/JFP
12 info prepublish jfp@2.6.0
13 verbose addLocalTarball adding from inside cache /Users/cmstead/.npm/jfp/2.6.0/package.tgz
14 silly cache afterAdd jfp@2.6.0
15 verbose afterAdd /Users/cmstead/.npm/jfp/2.6.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/cmstead/.npm/jfp/2.6.0/package/package.json written
17 silly publish { name: 'jfp',
17 silly publish   description: 'A language as a library borrowing concepts from Lisp and Haskell. JFP contains functions which allow for gentle adoption of functional programming ideas for developers who are new to the functional paradigm. JFP embraces the dynamic nature of Javascript while supporting safe data typing.',
17 silly publish   main: 'dist/jfp.js',
17 silly publish   version: '2.6.0',
17 silly publish   repository: { type: 'git', url: 'git+https://github.com/cmstead/JFP.git' },
17 silly publish   scripts: { build: 'node build-scripts/build-all.js' },
17 silly publish   devDependencies:
17 silly publish    { async: '^1.5.0',
17 silly publish      grunt: '^0.4.5',
17 silly publish      'grunt-contrib-clean': '^0.6.0',
17 silly publish      'grunt-contrib-concat': '^0.5.0',
17 silly publish      'grunt-contrib-copy': '^0.7.0',
17 silly publish      'grunt-contrib-jshint': '^0.10.0',
17 silly publish      'grunt-contrib-uglify': '^0.6.0',
17 silly publish      'grunt-contrib-watch': '^0.6.1',
17 silly publish      'grunt-jasmine-nodejs': '^1.4.0',
17 silly publish      'uglify-js': '^2.4.15' },
17 silly publish   readme: 'JFP - Javascript Function Processor\n===================================\n\nLibrary documentation:\n\nhttp://cmstead.github.io/JFP\n\nNPM Package Information:\n\nhttps://www.npmjs.com/package/jfp\n\nJavascript Function Processor is a functional library built around the idea that functional\nprogramming shouldn\'t require special objects or OO paradigms to play well. Chaining shouldn\'t\nbe limited to functions in the library.\n\nProgrammers should be able to extend their libraries easily. Programmers should be able\nto bend their environment to their own will, not the other way around. This is what JFP gives you.\n\nLicensed under the Mozilla Public License (MPL). For the full text of the license please see the included text file.\nIf the text file has been removed, please visit:\n\nhttps://www.mozilla.org/MPL/\n\n###V2.6.0\n\n- [x] takeUntil - captures values in order from the beginning of provided list until a value causes the predicate to pass\n- [x] dropUntil - drops values from array until predicate is satisfied\n- [x] zip - zips n arrays together into an array of n-length arrays\n- [x] addModule - takes function and executes, capturing map of keys and functions; returns function which will attempt to add functions to JFP; throws error if any names exist, or any functions cannot be added \n- [x] Various updates and fixes\n    - Compose predicates rewritten to use pattern matching\n    - Updated slice base arity to 2\n    - Fixed sneaky bug in slice\n    - Updated slice, drop and sort to reduce code footprint\n    - Removed excess and redundant code in reduce and composite\n    - Refactored each function to use recur function\n\n###V2.5.1\n\n- [x] Fix arity of deref so base arity is 2 (fix to make currying work more predictably)\n\n###V2.5.0\n\n- [x] isTuple - predicate testing on if array is a tuple of n length &lt;int&gt;, &lt;array&gt; -&gt; &lt;boolean&gt;\n- [x] isPair - special case isTuple representable by j(\'isTuple\', 2) -- intentionally does NOT conform to scheme\'s pair? predicate\n- [x] isSingle - special case isTuple representable by j(\'isTuple\', 1)\n- [x] isTriple - special case isTuple representable by j(\'isTuple\', 3)\n- [x] transform - transforms an object into a new object through an array of pairs-based transform definitions -- This ignores all non-pair values\n- [x] getKeys - returns array of object keys returns empty array if value is not an object or if object has no keys\n- [x] hasFirst - checks if array contains a first element, always returns false on non-array values\n- [x] always - returns a function which always returns the same value -- similar to j.partial(j.identity, value)\n- [x] empty - accepts type string, returns initialized, empty value of type specified by type string, with no string, empty returns null\n- [x] isMultipleOf - verifies value is multiple of a number\n- [x] composePredicate - takes a list of predicate functions and applies them to a value, returning a boolean, optional combinator allows for and/or combination behavior selection; default behavior is "and"\n- [x] Assorted updates and enhancements\n    - Updated shortCircuit to act on an typeString\n    - Updated merge function to reduce verbosity and improve stability\n    - Added AMD/RequireJS module support\n\n###V2.4.0\n\nUpcoming functionality\n\n- [x] getType - returns type of value -- &lt;any&gt; value -&gt; &lt;string&gt; handles array special case as \'array\'\n- [x] isType - checks type of value -- &lt;string&gt; typeString, &lt;any&gt; value -&gt; &lt;boolean&gt;\n- [x] isPrimitive - checks if value type is a primitive -- &lt;any&gt; value -&gt; &lt;boolean&gt;\n- [x] clone - clones objects and arrays -- &lt;T&gt; -&gt; &lt;T&gt;\n- [x] maybeType - Applies type string to maybe function and returns new maybe function accepting a value -- &lt;string&gt; -&gt; &lt;function&gt;&lt;T&gt; -&gt; &lt;T | null&gt;\n- [x] eitherType - Applies type string to either function and returns a new, curried either function accepting a default value and an option value -- &lt;string&gt; -&gt; &lt;function&gt;&lt;T&gt; -&gt; &lt;function&gt;&lt;T&gt; -&gt; &lt;T | null&gt;\n- [x] splitPartial - Performs a split left/right partial, applying final args in the middle of the set - &lt;function&gt;, &lt;array&gt;&lt;Any&gt;, &lt;array&gt;&lt;Any&gt; -&gt; &lt;function&gt;&lt;Any&gt;[&lt;Any&gt;...]\n- [x] Updated functionality to explicitly handle array as a type\n\t- getType returns array\n\t- isType(\'array\', []) returns true\n\t- maybe([], \'array\') returns [], array respected as object for backwards-compatibility and Javascript standard\n\t- either([], [1, 2, 3, 4], \'array\') returns [1, 2, 3, 4]\n- [x] Update arity reporting to improve default currying behavior\n    - Reduce - default arity of 2, multi-arity max 3\n- [x] Code refactoring\n    - Boolean typecast instead of using !!\n\t- Updates to predicate functionality, reducing footprint\n- [x] Added nuget build automation\n\n###V2.3.2\n\nFixed issue with toValues which occasionally caused an infinite loop.\n\n###V2.3.1\n\nFixed issue with compose, filter and map which were misbehaving after last update.\n\n###V2.3.0\n\nUpcoming functionality\n\n- [x] Partition - partitions list based on predicate function\n- [x] MultiPartition - Partitions list based on 2-arity predicate function with a list of comparison values\n- [x] Update deref to accept key, object by default and fall back to compatible mode to support 2.0.x implementation\n\n###v2.2.1\n\nUpcoming changes\n\n- Refactorization of functions for readability and maintenance\n- Removed unnecessary code for function argument length and fell back to standard JS behavior, Function.length\n- Reworking dependencies to simplify code\n- Enhacning performance as applicable\n- Adding license information (Never quite did that. WHOOPS!)\n\n###v2.2.0\n\nAdded functionality to j-aliasing - pick aliasing\n\ncalling j(\':propertyname\') returns a partially applied j.pick\ncalling j(\':propertyname\', object) will return the picked property from an object\n\n###v2.1.0\n\nBecause sometimes I forget how to semver...\n\nAnyway, updates go a little like this:\n\n- Fixed reverseArgs. Function now returns value output from execution of original function.\n- Fixed deref. Function no longer returns key value if object value is null or undefined.\n\n###v2.0.0\n\nBelow is the list of planned breaking changes coming in v2.0\n\n*Breaking changes*\n\n- [x] Maybe will be rewritten  a -&gt; a | null to adhere to a Haskell analog of maybe\n- [x] Pipeline will take a value of any type as an initial argument and then pipeline the value through the provided functions in order\n\n*New functions*\n\n- [x] Deref will take an object, a dot-separated key and a default and return either the dereferenced value, null or default if provided.\n- [x] ShortCircuit will be added (and possibly retrofit into v1.x). ShortCircuit will replace the current definition of maybe.\n- [x] ReverseArgs returns a wrapper function around an original function which reverses all arguments passed in\n- [x] PartialReverse returns a reverseArgs wrapped partial application of original function\n\n*Extended functionality*\n\n- [x] Either will be extended to allow for a datatype to be specified for greater flexibility\n\n*Migration Path*\n\nMigrating from 1.2.x to 2.0.0 is pretty straightforward. Following are the changes that need to be made:\n\n- Maybe can be renamed to shortCircuit.\n- Pipeline will need all arguments moved inside the function call and ordered with value first. All functions are listed in execution order.\n\n\n##Update log\n\nNote: OMG! What madness is this?? Version 1.2.x! I know there are just a few people using this library right now, but thanks for all issues created and helpful feedback. I use this library a lot and outside input is so helpful to keep making things better.\n\n###v1.2.3\n\nUpdates:\n\n- jfp is a shorthand function for currying\n- execute -- handle passed arguments instead of simply calling provided function\n\n###v1.2.2 (Technically this should have been 1.3 but I couldn\'t justify it for one function)\n\nAdded function:\n\n- execute -- executes function and returns result\n\n###v1.2.1\n\nUpdated functionality:\n\n- original contains function is now some (predicate, array)\n- added new contains (value, array)\n\n###v1.2.0\n\nAdded new functionality:\n\n- contains (predicate, array) O(n) (pathological case)\n- every (predicate, array) O(n)\n- numberOf (predicate, array) O(n)\n- merge (defaultObject, object) O(n)\n- sort ([comparator,] array) O(n log n)\n- union (array, array) O(n log n)\n- intersect (array, array) O(n log n)\n- difference (array, array) O(n log n)\n- symmetricDifference (array, array) O(n log n) to O(slow) (pathological case)\n\n###v1.1.4\n\nFixed bad case where concat would ignore valid falsey values. If this behavior is desired, j.compact will remove falsey values in O(n) time.\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'de8cb44cfac5ea9672e072a96c571311ac5b5841',
17 silly publish   bugs: { url: 'https://github.com/cmstead/JFP/issues' },
17 silly publish   homepage: 'https://github.com/cmstead/JFP#readme',
17 silly publish   _id: 'jfp@2.6.0',
17 silly publish   _shasum: 'f960abd2c5d2b16d931fa2c6f8cd5b29367faeba',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name jfp
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/jfp
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/cmstead/.npm/jfp/2.6.0/package.tgz
25 verbose request uri https://registry.npmjs.org/jfp
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 7:30:19 PM
28 verbose request id 414243627117fe8b
29 http request PUT https://registry.npmjs.org/jfp
30 http 403 https://registry.npmjs.org/jfp
31 verbose headers { 'content-type': 'application/json',
31 verbose headers   'cache-control': 'max-age=300',
31 verbose headers   'content-length': '95',
31 verbose headers   'accept-ranges': 'bytes',
31 verbose headers   date: 'Sat, 30 Jan 2016 03:30:19 GMT',
31 verbose headers   via: '1.1 varnish',
31 verbose headers   connection: 'keep-alive',
31 verbose headers   'x-served-by': 'cache-sjc3121-SJC',
31 verbose headers   'x-cache': 'MISS',
31 verbose headers   'x-cache-hits': '0',
31 verbose headers   'x-timer': 'S1454124619.514187,VS0,VE396' }
32 verbose request invalidating /Users/cmstead/.npm/registry.npmjs.org/jfp on PUT
33 error publish Failed PUT 403
34 verbose stack Error: "You cannot publish over the previously published version 2.6.0." : jfp
34 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
34 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
34 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:354:22)
34 verbose stack     at Request.emit (events.js:110:17)
34 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1207:14)
34 verbose stack     at Request.emit (events.js:129:20)
34 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1153:12)
34 verbose stack     at IncomingMessage.emit (events.js:129:20)
34 verbose stack     at _stream_readable.js:908:16
34 verbose stack     at process._tickCallback (node.js:355:11)
35 verbose statusCode 403
36 verbose pkgid jfp
37 verbose cwd /Users/cmstead/Documents/projects/JFP
38 error Darwin 13.4.0
39 error argv "node" "/usr/local/bin/npm" "publish"
40 error node v0.12.7
41 error npm  v2.11.3
42 error code E403
43 error "You cannot publish over the previously published version 2.6.0." : jfp
44 error If you need help, you may report this error at:
44 error     <https://github.com/npm/npm/issues>
45 verbose exit [ 1, true ]
